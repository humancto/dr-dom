/**
 * URLhaus Malware Detection - REAL IMPLEMENTATION
 * Uses URLhaus API to check for malicious URLs in real-time
 */

class URLhausMalwareDetector {
  constructor() {
    this.threats = [];
    this.checkedUrls = new Map();
    this.init();
  }

  async init() {
    // Start scanning after page loads
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.scanPage());
    } else {
      setTimeout(() => this.scanPage(), 1000);
    }
  }

  async checkURL(url) {
    if (!url || this.checkedUrls.has(url)) {
      return this.checkedUrls.get(url);
    }

    try {
      // Use background script to avoid CORS issues
      const response = await new Promise((resolve) => {
        chrome.runtime.sendMessage(
          { 
            action: 'checkURLhaus',
            url: url 
          },
          (response) => {
            resolve(response);
          }
        );
      });

      if (response && response.success && response.data) {
        const data = response.data;
        
        if (data.query_status === 'ok') {
          // URL is in malware database
          const threat = {
            isMalicious: true,
            url: url,
            threat_type: data.threat || 'malware',
            tags: data.tags || [],
            date_added: data.date_added,
            urlhaus_reference: data.urlhaus_reference,
            severity: this.getSeverity(data.threat, data.tags)
          };
          
          this.checkedUrls.set(url, threat);
          this.threats.push(threat);
          return threat;
        }
      }
      
      // Not in database or API failed - do heuristic check
      const heuristicResult = this.heuristicCheck(url);
      this.checkedUrls.set(url, heuristicResult);
      return heuristicResult;
      
    } catch (error) {
      console.warn('[URLhaus] Check failed, using heuristics:', error);
      const heuristicResult = this.heuristicCheck(url);
      this.checkedUrls.set(url, heuristicResult);
      return heuristicResult;
    }
  }

  heuristicCheck(url) {
    const suspicious = {
      isMalicious: false,
      url: url,
      threats: []
    };

    // Check for executable downloads
    if (/\.(exe|scr|vbs|cmd|bat|ps1|jar|msi|dmg)$/i.test(url)) {
      suspicious.isMalicious = true;
      suspicious.threats.push('executable-download');
      suspicious.severity = 'high';
    }

    // Check for known malware hosting patterns
    const malwarePatterns = [
      /dropper\./i,
      /payload\./i,
      /malware\./i,
      /exploit\./i,
      /0day\./i,
      /backdoor\./i,
      /trojan\./i,
      /virus\./i,
      /worm\./i,
      /ransomware\./i
    ];

    for (const pattern of malwarePatterns) {
      if (pattern.test(url)) {
        suspicious.isMalicious = true;
        suspicious.threats.push('malware-pattern');
        suspicious.severity = 'critical';
        break;
      }
    }

    // Check for cryptominers
    const minerPatterns = [
      'coinhive.com',
      'coin-hive.com',
      'jsecoin.com',
      'cryptoloot.com',
      'crypto-loot.com',
      'webmine.cz',
      'minemytraffic.com',
      'projectpoi.com',
      'minero.pw',
      'webmine.pro'
    ];

    for (const miner of minerPatterns) {
      if (url.includes(miner)) {
        suspicious.isMalicious = true;
        suspicious.threats.push('cryptominer');
        suspicious.severity = 'medium';
        break;
      }
    }

    return suspicious;
  }

  getSeverity(threat, tags) {
    if (tags.includes('ransomware') || tags.includes('trojan')) {
      return 'critical';
    }
    if (tags.includes('phishing') || tags.includes('malware')) {
      return 'high';
    }
    if (tags.includes('cryptominer') || tags.includes('adware')) {
      return 'medium';
    }
    return 'low';
  }

  async scanPage() {
    console.log('[URLhaus] Starting malware scan...');
    
    // Get all requests from storage
    const domain = window.location.hostname;
    const storageKey = `drDOM_${domain}`;
    
    chrome.storage.local.get(storageKey, async (result) => {
      const data = result[storageKey];
      if (!data || !data.requests) return;

      const threats = [];
      
      // Check each request
      for (const request of data.requests.slice(0, 50)) { // Limit to 50 for performance
        const threat = await this.checkURL(request.url);
        if (threat && threat.isMalicious) {
          threats.push({
            ...threat,
            request: request
          });
        }
      }

      // Check current page
      const pageThreat = await this.checkURL(window.location.href);
      if (pageThreat && pageThreat.isMalicious) {
        threats.unshift({
          ...pageThreat,
          isMainPage: true
        });
      }

      if (threats.length > 0) {
        // Store threats
        chrome.storage.local.set({
          [`${storageKey}_malware`]: {
            threats: threats,
            scanTime: Date.now(),
            critical: threats.filter(t => t.severity === 'critical').length,
            high: threats.filter(t => t.severity === 'high').length,
            medium: threats.filter(t => t.severity === 'medium').length
          }
        });

        console.warn(`[URLhaus] Found ${threats.length} threats!`, threats);
        
        // Show alert for critical threats
        const critical = threats.find(t => t.severity === 'critical');
        if (critical) {
          this.showThreatAlert(critical);
        }
      } else {
        // Store clean result
        chrome.storage.local.set({
          [`${storageKey}_malware`]: {
            threats: [],
            scanTime: Date.now(),
            clean: true
          }
        });
      }
    });
  }

  showThreatAlert(threat) {
    // Don't show multiple alerts
    if (document.getElementById('drdom-malware-alert')) return;

    const alert = document.createElement('div');
    alert.id = 'drdom-malware-alert';
    alert.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #f44336, #d32f2f);
      color: white;
      padding: 20px;
      border-radius: 8px;
      max-width: 400px;
      z-index: 2147483647;
      box-shadow: 0 4px 20px rgba(0,0,0,0.3);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      animation: slideIn 0.3s ease;
    `;

    alert.innerHTML = `
      <div style="display: flex; align-items: start;">
        <div style="font-size: 24px; margin-right: 15px;">⚠️</div>
        <div style="flex: 1;">
          <div style="font-size: 16px; font-weight: bold; margin-bottom: 8px;">
            MALWARE DETECTED!
          </div>
          <div style="font-size: 14px; opacity: 0.9; margin-bottom: 12px;">
            This page contains malicious content that could harm your device.
          </div>
          <div style="font-size: 12px; opacity: 0.8;">
            Threat: ${threat.threat_type || 'Unknown malware'}
            ${threat.tags ? `<br>Tags: ${threat.tags.join(', ')}` : ''}
          </div>
          <div style="margin-top: 15px; display: flex; gap: 10px;">
            <button onclick="window.history.back()" style="
              background: white;
              color: #f44336;
              border: none;
              padding: 8px 16px;
              border-radius: 4px;
              cursor: pointer;
              font-weight: bold;
            ">Leave Page</button>
            <button onclick="document.getElementById('drdom-malware-alert').remove()" style="
              background: transparent;
              color: white;
              border: 1px solid white;
              padding: 8px 16px;
              border-radius: 4px;
              cursor: pointer;
            ">Dismiss</button>
          </div>
        </div>
      </div>
      <style>
        @keyframes slideIn {
          from { transform: translateX(400px); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
      </style>
    `;

    document.body.appendChild(alert);
  }
}

// Initialize
const urlhausDetector = new URLhausMalwareDetector();
console.log('[Dr. DOM] URLhaus malware detector active');